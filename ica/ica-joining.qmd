---
title: "Joining"
format: html
---

## Exercise 1: Where Are My Keys?

### Part A

```{r}
library(dplyr)
library(ggplot2)

students_2 <- data.frame(
  student = c("D", "E", "F"),
  class = c("COMP 101", "BIOL 101", "POLI 101")
)

enrollments_2 <- data.frame(
  course = c("ART 101", "BIOL 101", "COMP 101"),
  enrollment = c(18, 20, 19)
)

```

### Part B

```{r}
students_2 |> 
  left_join(enrollments_2, join_by(class == course))
```

### Part C

```{r}
students_3 <- data.frame(
  student = c("Y", "Y", "Z", "Z"),
  class = c("COMP 101", "BIOL 101", "POLI 101", "COMP 101"),
  grade = c("B", "S", "C", "A")
)

enrollments_3 <- data.frame(
  class = c("ART 101", "BIOL 101","COMP 101"),
  grade = c("B", "A", "A-"),
  enrollment = c(20, 18, 19)
)

students_3 |>
  left_join(enrollments_3)
```

### Part D

```{r}
students_3 |>
  left_join(enrollments_3, join_by(class==class))
```

'grade.x' are the individual grade values from the students_3 dataset, and 'grade.y' are the average class grades from enrollments_3.

## Exercise 2: More Small Practice

```{r}
voters <- data.frame(
  id = c("A", "D", "E", "F", "G"),
  times_voted = c(2, 4, 17, 6, 20)
)

contact <- data.frame(
  name = c("A", "B", "C", "D"),
  address = c("summit", "grand", "snelling", "fairview"),
  age = c(24, 89, 43, 38)
)

# 1. We want contact info for people who HAVEN'T voted
contact |>
  anti_join(voters, join_by(name == id))

# 2. We want contact info for people who HAVE voted
contact |>
  semi_join(voters, join_by(name == id))

# 3. We want any data available on each person
contact |>
  full_join(voters, join_by(name == id))

# 4. When possible, we want to add contact info to the voting roster
voters |>
  left_join(contact, join_by(id == name))

```

## Exercise 3: Bigger Datasets

```{r}
grades <- read.csv("https://mac-stat.github.io/data/grades.csv") |> 
  distinct(sid, sessionID, .keep_all = TRUE)
head(grades)

courses <- read.csv("https://mac-stat.github.io/data/courses.csv")
head(courses)

# How many observations (rows) and variables (columns) are there in the grades data?
nrow(grades)
ncol(grades)

# How many observations (rows) and variables (columns) are there in the courses data?
nrow(courses)
ncol(courses)

```

## Exercise 4: Class Size

### Part A

```{r}
courses_combined <- courses |> 
  group_by(sessionID) |> 
  summarise(enroll = sum(enroll))

# Check that this has 1695 rows and 2 columns
dim(courses_combined)
```

### Part B

```{r}
courses_combined |>
  summarise(median(enroll))
```

### Part C

```{r}
student_class_size <- grades |>
  left_join(courses_combined) |>
  group_by(sid) |>
  summarise(median_enroll = median(enroll))
```

### Part D

```{r}
ggplot(student_class_size, aes(x = median_enroll)) +
  geom_histogram(fill = "#CBEF43", color = "#138A36")
```
Students most commonly have classes with around 15-25 students in them. 

## Exercise 5: Narrowing In On Classes

### Part A

```{r}
grades |>
  filter(sessionID == "session1986")
```

### Part B

```{r}
dept_E <- courses |> 
  filter(dept == "E")

dept_E |>
  left_join(grades) |>
  select(sid, sessionID, grade)
```

## Exercise 6: All the Wrangling

```{r}
gpa_conversion <- tibble(
  grade = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "NC", "AU", "S"), 
  gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0, NA, NA)
)
```

### Part A

```{r}
courses |>
  group_by(dept) |>
  summarise(total_enroll = sum(enroll)) |>
  arrange(desc(total_enroll))
```

### Part B

```{r}
grades |>
  left_join(gpa_conversion) |>
  group_by(sid) |>
  summarise(avg = mean(gp))
```

### Part C

```{r}
grades |>
  left_join(gpa_conversion) |>
  group_by(sid) |>
  summarise(avg = mean(gp)) |>
  summarise(median_all = median(avg, na.rm = TRUE))
```

### Part D

```{r}
grades |>
  left_join(gpa_conversion) |>
  mutate(below = gp < 3.3) |>
  summarise(mean(below, na.rm = TRUE))
```

### Part E

```{r}
courses |>
  left_join(grades) |>
  left_join(gpa_conversion) |>
  group_by(iid) |>
  summarise(inst_avg = mean(gp, na.rm = TRUE)) |>
  arrange(inst_avg)
```

### Part F

```{r}
cross_listed <- courses |>
  count(sessionID) |>
  filter(n > 1)

courses |>
  left_join(grades) |>
  left_join(gpa_conversion) |>
  anti_join(cross_listed) |>
  group_by(dept) |>
  summarise(dept_gp = mean(gp, na.rm = TRUE)) |>
  arrange(dept_gp)
```


